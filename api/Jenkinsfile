pipeline {
    agent any
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-pwd') // Configura las credenciales para Docker Hub
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                cleanWs() // Limpia el espacio de trabajo para evitar conflictos con archivos anteriores
            }
        }

        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/dev']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/maperez1225/devops-web-app-example']]])
                // Clona el repositorio desde GitHub
            }
        }

        stage('Install Python if not available') {
            steps {
                script {
                    // Verificar si Python está instalado
                    def pythonInstalled = sh(script: 'command -v python3', returnStatus: true) == 0
                    if (!pythonInstalled) {
                        // Instalar Python usando el gestor de paquetes de tu sistema
                        sh 'sudo apt update && sudo apt install -y python3 python3-pip python3-venv'
                    }
                }
            }
        }

        stage('Create Virtual Environment') {
            steps {
                script {
                    // Crear un entorno virtual
                    sh 'python3 -m venv venv'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    dir('api') { // Cambia al directorio API
                        // Activar el entorno virtual y luego instalar las dependencias
                        sh '''
                        . ../venv/bin/activate
                        pwd
                        ls -l
                        pip install -r ./requirements.txt
                        '''
                    }
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                script {
                    dir('api') { // Cambia al directorio API
                        // Activar el entorno virtual y luego ejecutar las pruebas unitarias
                        sh '''
                        . ../venv/bin/activate
                        python -m unittest ./test.py
                        '''
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Construir la imagen Docker
                    sh 'docker build -t luis486/api:latest .'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Iniciar sesión en Docker Hub y empujar la imagen
                    sh '''
                    echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin
                    docker push luis486/api:latest
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs() // Limpia el espacio de trabajo después de la ejecución del pipeline
        }
        success {
            echo 'Pipeline completed successfully!' // Mensaje de éxito
        }
        failure {
            echo 'Pipeline failed. Please check the logs.' // Mensaje de fallo
        }
    }
}

