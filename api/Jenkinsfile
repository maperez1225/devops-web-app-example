pipeline {
    agent any
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-pwd') // Configura las credenciales para Docker Hub
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                cleanWs() // Limpia el espacio de trabajo para evitar conflictos con archivos anteriores
            }
        }

        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/maperez1225/devops-web-app-example']]])
                // Clona el repositorio desde GitHub
            }
        }

        stage('Install Python if not available') {
            steps {
                script {
                    // Verificar si Python está instalado
                    def pythonInstalled = sh(script: 'command -v python', returnStatus: true) == 0
                    if (!pythonInstalled) {
                        // Instalar Python usando el gestor de paquetes de tu sistema
                        sh 'sudo apt update && sudo apt install -y python3'
                    }
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    dir('API') { // Cambia al directorio API
                        sh 'pip install -r requirements.txt' // Instala las dependencias listadas en requirements.txt
                    }
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                script {
                    dir('API') { // Cambia al directorio API
                        sh 'python -m unittest test.py' // Ejecuta las pruebas unitarias definidas en test.py
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t luis486/api:latest .' // Construye la imagen Docker
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh "echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin" // Inicia sesión en Docker Hub
                    sh 'docker push luis486/api:latest' // Empuja la imagen a Docker Hub
                }
            }
        }
    }

    post {
        always {
            cleanWs() // Limpia el espacio de trabajo después de la ejecución del pipeline
        }
        success {
            echo 'Pipeline completed successfully!' // Mensaje de éxito
        }
        failure {
            echo 'Pipeline failed. Please check the logs.' // Mensaje de fallo
        }
    }
}
