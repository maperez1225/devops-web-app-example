pipeline {
    agent any
    
    tools {nodejs "NodeJs"}

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-pwd') // Configura las credenciales para Docker Hub
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                cleanWs() // Limpia el espacio de trabajo para evitar conflictos con archivos anteriores
            }
        }

        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/dev']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/maperez1225/devops-web-app-example']]])
                // Clona el repositorio desde GitHub
            }
        }

        stage('Install Node.js and Dependencies') {
            steps {
                script {
                    // Verificar si Node.js está instalado
                    def nodeInstalled = sh(script: 'node --version', returnStatus: true) == 0
                    if (!nodeInstalled) {
                        // Instalar Node.js usando el gestor de paquetes de tu sistema
                        sh 'sudo apt update && sudo apt install -y nodejs npm'
                    }
                }
            }
        }

        stage('Install Vue.js Dependencies') {
            steps {
                script {
                    dir('web') {
                        // Instalar las dependencias de Vue.js
                        sh 'npm install'
                    }
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                script {
                    dir('web/tests/unit') {
                        // Ejecutar pruebas unitarias
                        sh 'npm test || true'
                    }
                }
            }
        }

        stage('Run Integration Tests') {
            steps {
                script {
                    dir('web/tests/integ') {
                        // Ejecutar pruebas de integración
                        sh 'npm test || true'
                    }
                }
            }
        }

        stage('Lint with ESLint') {
            steps {
                script {
                    dir('web') {
                        // Ejecutar ESLint para realizar análisis estático del código
                        sh 'npm run lint || true'
                    }
                }
            }
        }

        stage('Build Vue.js App') {
            steps {
                script {
                    dir('web') {
                        // Compilar el proyecto Vue.js
                        sh 'npm run build'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('web') {
                        // Construir la imagen Docker
                        sh 'docker build -t luis486/web:latest .'
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    // Iniciar sesión en Docker Hub y empujar la imagen
                    sh '''
                    docker push luis486/web:latest
                    '''
                }
            }
        }
    }

    post {
        always {
            cleanWs() // Limpia el espacio de trabajo después de la ejecución del pipeline
        }
        success {
            echo 'Pipeline completed successfully!' // Mensaje de éxito
        }
        failure {
            echo 'Pipeline failed. Please check the logs.' // Mensaje de fallo
        }
    }
}
